{
	"Express App with Mongo Connect": {
		"prefix": "emapp",
		"body": [
			"const express = require('express');",
			"const app = express();",
			"const cors = require('cors');",
			"const { default: mongoose } = require('mongoose');",
			"require('dotenv').config()",
			"",
			"// Mongo DB Connections",
            "mongoose.connect(process.env.MONGO_DB_URL).then(response=>{",
			"    console.log('MongoDB Connection Succeeded.')",
			"}).catch(error=>{",
			"    console.log('Error in DB connection: ' + error)",
            "});",
			"",
			"",
			"// Middleware Connections",
			"app.use(cors())",
			"app.use(express.json())",
			"",
			"",
			"// Routes",
			"",
			"",
			"// Connection",
			"const PORT = process.env.PORT || 5000",
			"app.listen(PORT, ()=>{",
			"    console.log('App running in port: '+PORT)",
			"})",
		],
		"description": "Express App Server with Mongo Connect"
	},
	"Express Get Route": {
		"prefix": "erg",
		"body": [
			"router.get('/${1:API_URL}', async(req, res) => {",
			"    try {",
			"        const ${TM_FILENAME_BASE}s = await ${0:${TM_FILENAME_BASE/(.*)$/${0:/capitalize}/}}.find()",
			"        res.send(${TM_FILENAME_BASE}s)",
			"    } catch (error) {",
			"        res.status(500).send(error.message)",
			"    }",
            "})",
		]
	},
	"Express POST Route": {
		"prefix": "erp",
		"body": [
			"router.post('/${1:API_URL}', async(req, res) => {",
			"    try {",
			"        let ${TM_FILENAME_BASE} = new ${0:${TM_FILENAME_BASE/(.*)$/${0:/capitalize}/}}({",
			"            key:value",
			"        })",
			"        ${TM_FILENAME_BASE} = await ${TM_FILENAME_BASE}.save()",
			"        res.send(${TM_FILENAME_BASE})",
			"    } catch (error) {",
			"        res.status(500).send(error.message)",
			"    }",
            "})",
		]
	},
	"Express PUT Route": {
		"prefix": "eru",
		"body": [
			"router.put('/${1:API_URL}/:id', async(req, res) => {",
			"    try {",
			"        const ${TM_FILENAME_BASE} = await ${0:${TM_FILENAME_BASE/(.*)$/${0:/capitalize}/}}.findByIdAndUpdate(req.params.id, {",
			"            key:value",
			"        },{new: true})",
			"        res.send(${TM_FILENAME_BASE})",
			"    } catch (error) {",
			"        res.status(500).send(error.message)",
			"    }",
            "})",
		]
	},
	"Express DELETE Route": {
		"prefix": "erd",
		"body": [
			"router.delete('/${1:API_URL}/:id', async(req, res) => {",
			"    try {",
			"        const ${TM_FILENAME_BASE} = await ${0:${TM_FILENAME_BASE/(.*)$/${0:/capitalize}/}}.findByIdAndDelete(req.params.id)",
			"        res.send(${TM_FILENAME_BASE})",
			"    } catch (error) {",
			"        res.status(500).send(error.message)",
			"    }",
            "})",
		]
	},
    "Express Route with Mongoose": {
        "prefix": "emr",
        "body": [
            "const { Router } = require('express');",
            "const router = Router(); ",
            "const ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}} = require('../model/${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}') ",
            "",
			"// Get all ${TM_FILENAME_BASE}s",
            "router.get('/', async(req, res) => {",
			"    try {",
			"        const ${TM_FILENAME_BASE}s = await ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}.find()",
			"        res.send(${TM_FILENAME_BASE}s)",
			"    } catch (error) {",
			"        res.status(500).send(error.message)",
			"    }",
            "})",
            "",
			"// Create a new ${TM_FILENAME_BASE}",
            "router.post('/', async(req, res) => {",
			"    try {",
			"        let ${TM_FILENAME_BASE} = new ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}({",
			"            key:value",
			"        })",
			"        ${TM_FILENAME_BASE} = await ${TM_FILENAME_BASE}.save()",
			"        res.send(${TM_FILENAME_BASE})",
			"    } catch (error) {",
			"        res.status(500).send(error.message)",
			"    }",
            "})",
            "",
			"// Get ${TM_FILENAME_BASE} By ID",
            "router.get('/:id', async(req, res) => {",
			"    try {",
			"        const ${TM_FILENAME_BASE} = await ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}.findById(req.params.id)",
			"        res.send(${TM_FILENAME_BASE})",
			"    } catch (error) {",
			"        res.status(500).send(error.message)",
			"    }",
            "})",
            "",
			"// Update ${TM_FILENAME_BASE} By ID",
            "router.put('/:id', async(req, res) => {",
			"    try {",
			"        const ${TM_FILENAME_BASE} = await ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}.findByIdAndUpdate(req.params.id, {",
			"            key:value",
			"        },{new: true})",
			"        res.send(${TM_FILENAME_BASE})",
			"    } catch (error) {",
			"        res.status(500).send(error.message)",
			"    }",
            "})",
            "",
			"// Delete ${TM_FILENAME_BASE} By ID",
            "router.delete('/:id', async(req, res) => {",
			"    try {",
			"        const ${TM_FILENAME_BASE} = await ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}.findByIdAndDelete(req.params.id)",
			"        res.send(${TM_FILENAME_BASE})",
			"    } catch (error) {",
			"        res.status(500).send(error.message)",
			"    }",
            "})",
            "",
            "module.exports = router",
        ],
        "description": "Create routes with all methods"
    },
    "Express Route with Mongoose and Auth": {
        "prefix": "emra",
        "body": [
            "const { Router } = require('express');",
            "const router = Router(); ",
            "const ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}} = require('../model/${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}') ",
			"const ${2:Authorization} = require('../middleware/${2:Authorization}')",
            "",
			"// Get all ${TM_FILENAME_BASE}s",
            "router.get('/', Authorization, async(req, res) => {",
			"    try {",
			"        const ${TM_FILENAME_BASE}s = await ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}.find()",
			"        res.send(${TM_FILENAME_BASE}s)",
			"    } catch (error) {",
			"        res.status(500).send(error.message)",
			"    }",
            "})",
            "",
			"// Create a new ${TM_FILENAME_BASE}",
            "router.post('/', Authorization, async(req, res) => {",
			"    try {",
			"        let ${TM_FILENAME_BASE} = new ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}({",
			"            key:value",
			"        })",
			"        ${TM_FILENAME_BASE} = await ${TM_FILENAME_BASE}.save()",
			"        res.send(${TM_FILENAME_BASE})",
			"    } catch (error) {",
			"        res.status(500).send(error.message)",
			"    }",
            "})",
            "",
			"// Get ${TM_FILENAME_BASE} By ID",
            "router.get('/:id', Authorization, async(req, res) => {",
			"    try {",
			"        const ${TM_FILENAME_BASE} = await ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}.findById(req.params.id)",
			"        res.send(${TM_FILENAME_BASE})",
			"    } catch (error) {",
			"        res.status(500).send(error.message)",
			"    }",
            "})",
            "",
			"// Update ${TM_FILENAME_BASE} By ID",
            "router.put('/:id', Authorization, async(req, res) => {",
			"    try {",
			"        const ${TM_FILENAME_BASE} = await ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}.findByIdAndUpdate(req.params.id, {",
			"            key:value",
			"        },{new: true})",
			"        res.send(${TM_FILENAME_BASE})",
			"    } catch (error) {",
			"        res.status(500).send(error.message)",
			"    }",
            "})",
            "",
			"// Delete ${TM_FILENAME_BASE} By ID",
            "router.delete('/:id', Authorization, async(req, res) => {",
			"    try {",
			"        const ${TM_FILENAME_BASE} = await ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}.findByIdAndDelete(req.params.id)",
			"        res.send(${TM_FILENAME_BASE})",
			"    } catch (error) {",
			"        res.status(500).send(error.message)",
			"    }",
            "})",
            "",
            "module.exports = router",
        ],
        "description": "Create routes all methods with auth"
    },
	"MongoDB Connect": {
        "prefix": "mdbc",
        "body": [
            "const mongoose = require('mongoose');",
            "",
            "// Connect MongoDB at default port 27017.",
            "mongoose.connect('mongodb://localhost:27017/${1:DB Name}', {",
            "    useNewUrlParser: true,",
            "    useCreateIndex: true,",
            "}, (err) => {",
            "    if (!err) {",
            "        console.log('MongoDB Connection Succeeded.')",
            "    } else {",
            "        console.log('Error in DB connection: ' + err)",
            "    }",
            "});"
        ],
        "description": "Generates code for Mongo DB Connect Locally."
    },
	"MongoDB Connect With Cloud": {
        "prefix": "mdbce",
        "body": [
            "const mongoose = require('mongoose');",
            "",
            "mongoose.connect(process.env.MONGO_DB_URL, {",
			"    useNewUrlParser: true,",
			"    useUnifiedTopology: true,",
			"}).then(response=>{",
			"    console.log('MongoDB Connection Succeeded.')",
			"}).catch(error=>{",
			"    console.log('Error in DB connection: ' + error)",
            "});"
        ],
        "description": "Generates code for Mongo DB Connect Cloud URL in env"
    },
	"Mongoose Schema": {
        "prefix": "msch",
        "body": [
            "const mongoose = require('mongoose');",
            "",
            "const ${TM_FILENAME_BASE}Schema = new mongoose.Schema({",
            "    key: {type:String},",
            "},{",
            "    timestamps: true,",
            "});",
            "",
            "const ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}} = mongoose.model('${TM_FILENAME_BASE}', ${TM_FILENAME_BASE}Schema)",
            "",
			"module.exports = ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}"
        ],
        "description": "Create schema mongoose"
    },
	"Express Mongoose JWT Authentication":{
		"prefix": "jwtauth",
		"body": [
			"const jwt = require('jsonwebtoken');",
			"const SECRET_KEY = process.env.SECRET_KEY;",
			"",
			"function ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}(req, res, next) {",
			"    const authorization = req.headers.authorization;",
			"    if (!authorization) {",
			"        return res.status(401).json({",
			"            message: 'No Authorization Header'",
			"        })",
			"    }",
			"    try {",
			"        const token = authorization.split('Bearer ')[1];",
			"        if (!token) {",
			"            return res.status(401).json({",
			"                message: 'Invalid Token Format'",
			"            })",
			"        }",
			"        const decode = await jwt.verify(token, SECRET_KEY);",
			"        req.user = decode",
			"        next()",
			"    } catch (error) {",
			"        if (error instanceof jwt.TokenExpiredError) {",
			"            return res.status(401).json({",
			"                message: 'Session Expired',",
			"                error: error.message,",
			"            })",
			"        }",
			"        if (error instanceof jwt.JsonWebTokenError || error instanceof TokenError) {",
			"            return res.status(401).json({",
			"                message: 'Invalid Token',",
			"                error: error.message,",
			"            })",
			"        }",
			"        res.status(500).json({",
			"            message: 'Internal server Error',",
			"            error: error.message,",
			"            stack: error.stack",
			"        });",
			"    }",
			"}",
			"",
			"module.exports = ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}"
		]
	}
}
